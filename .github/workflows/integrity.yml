name: Integrity Check

on:
  workflow_call:
    inputs:
      reason:
        required: false
        type: string
        default: 'Scheduled check'
      production_url:
        required: false
        type: string
        default: 'https://www.hummbl.io'
    secrets:
      ALERT_WEBHOOK_URL:
        required: false

jobs:
  verify:
    name: Verify Production Integrity
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Ensure all files are checked out
          fetch-tags: true
          # Don't use sparse checkout
          sparse-checkout: ''
          # Show all tracked files for debugging
          show-progress: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Verify repository state
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          
          # Check for pnpm-lock.yaml in common locations
          if [ -f "pnpm-lock.yaml" ]; then
            echo "‚úÖ pnpm-lock.yaml found in root directory"
            echo "File size: $(wc -l < pnpm-lock.yaml) lines"
          elif [ -f "../pnpm-lock.yaml" ]; then
            echo "‚ÑπÔ∏è  pnpm-lock.yaml found in parent directory"
            echo "File size: $(wc -l < ../pnpm-lock.yaml) lines"
            # Copy to expected location
            cp ../pnpm-lock.yaml .
          else
            echo "‚ùå Error: pnpm-lock.yaml not found in expected locations"
            echo "Searching for pnpm-lock.yaml in repository..."
            find . -name "pnpm-lock.yaml" -type f -exec echo "Found: {}" \;
            exit 1
          fi
          
          # Verify pnpm-lock.yaml is not empty
          if [ ! -s "pnpm-lock.yaml" ]; then
            echo "‚ùå Error: pnpm-lock.yaml is empty"
            exit 1
          fi

      - name: Install dependencies
        run: |
          echo "Installing dependencies using pnpm..."
          pnpm install --frozen-lockfile || {
            echo "pnpm install failed. Trying to recover..."
            # Try to regenerate the lockfile if the frozen install fails
            pnpm install
            exit 1
          }

      - name: Debug - List files
        run: |
          ls -la
          echo "Current directory: $(pwd)"
          echo "pnpm-lock exists: $(ls pnpm-lock.yaml 2>/dev/null && echo 'yes' || echo 'no')"
          echo "Script exists: $(ls scripts/verify_production_integrity.mjs 2>/dev/null && echo 'yes' || echo 'no')"

      - name: Run integrity check
        id: integrity
        run: |
          # Set default URL if not provided
          PROD_URL="${1:-https://www.hummbl.io}"
          echo "üîç Running integrity check against: $PROD_URL"
          
          # Verify script exists and is executable
          SCRIPT_PATH="scripts/verify_production_integrity.mjs"
          if [ ! -f "$SCRIPT_PATH" ]; then
            echo "‚ùå Error: $SCRIPT_PATH not found!"
            echo "Current directory: $(pwd)"
            echo "Contents of scripts/ directory:"
            ls -la scripts/ 2>/dev/null || echo "scripts/ directory not found"
            exit 1
          fi
          
          # Make sure the script is executable
          chmod +x "$SCRIPT_PATH"
          
          # Run the script with error handling
          echo "üöÄ Starting integrity check..."
          set +e  # Don't exit on error
          NODE_DEBUG=* node "$SCRIPT_PATH" --url "$PROD_URL"
          EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "‚ùå Integrity check failed with exit code: $EXIT_CODE"
            # Set an output to indicate failure
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 0  # Don't fail the workflow, we'll handle the failure in the next step
          else
            echo "‚úÖ Integrity check passed successfully"
            echo "status=success" >> $GITHUB_OUTPUT
          fi
        env:
          NODE_OPTIONS: --max-old-space-size=2048
          NODE_DEBUG: '*'  # Enable Node.js debug output
          DEBUG: '*'       # Enable debug output for modules that use debug
          
      - name: Check integrity check result
        if: steps.integrity.outputs.status != 'success'
        run: |
          echo "‚ùå Integrity check failed. See the logs above for details."
          echo "This is a non-blocking error. The workflow will continue but will be marked as failed."
          # Exit with a non-zero code to mark the job as failed
          exit 1

      - name: Send alert on failure
        if: failure() && github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const webhookUrl = process.env.ALERT_WEBHOOK_URL;
            
            // Skip if no webhook URL is provided
            if (!webhookUrl || webhookUrl === '') {
              console.log('No ALERT_WEBHOOK_URL provided, skipping alert');
              return;
            }
            
            // Validate the webhook URL
            try {
              new URL(webhookUrl);
            } catch (e) {
              console.error('Invalid webhook URL:', e.message);
              console.log('Skipping alert due to invalid webhook URL');
              return;
            }
            
            try {
              const { data } = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
              });
              
              const response = await fetch(webhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  text: `‚ùå Integrity check failed for ${context.repo.repo}`,
                  run_url: data.html_url,
                  run_number: data.run_number,
                  reason: '${{ inputs.reason || 'No reason provided' }}',
                  timestamp: new Date().toISOString()
                })
              });
              
              if (!response.ok) {
                console.error('Failed to send alert:', await response.text());
              } else {
                console.log('Alert sent successfully');
              }
            } catch (error) {
              console.error('Error sending alert:', error);
              // Don't fail the workflow if alerting fails
            }
        env:
          ALERT_WEBHOOK_URL: ${{ secrets.ALERT_WEBHOOK_URL || '' }}
